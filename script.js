const responses = ['b', 'a', 'c', 'a', 'b'];
const emojis = ['‚úîÔ∏è', '‚ú®', 'üëÄ', 'üò≠', 'üëé'];

// Selectionne le formulaire
const form = document.querySelector('.quiz-form');

// Ajoute un √©couteur d'√©v√©nement pour le submit
form.addEventListener('submit', handleSubmit);

// Fonction appel√©e lors du submit
function handleSubmit(event) {
  // Annule le comportement par d√©faut du formulaire
  event.preventDefault();

  // R√©cup√®re les r√©ponses des inputs radio coch√©s
  const results = [];
  const radioButtons = document.querySelectorAll('input[type="radio"]:checked');

  // Compare les r√©ponses aux r√©ponses attendues
  radioButtons.forEach((radioButton, index) => {
    // Si la r√©ponse est correcte, ajoute true au tableau results
    if (radioButton.value === responses[index]) {
      results.push(true);
    }
    // Sinon, ajoute false
    else {
      results.push(false);
    }
  });

  // Appelle la fonction showResults avec le tableau results
  showResults(results);
  // Appelle la fonction addColors avec le tableau results
  addColors(results);
}

const titleResult = document.querySelector('.quiz-title');

// Fonction pour afficher les r√©sultats
function showResults(results) {
  // Compte le nombre de r√©ponses fausses
  const errorsNumber = results.filter((el) => el === false).length;

  // Affiche le nombre de r√©ponses correctes au cas par cas
  switch (errorsNumber) {
    case 0:
      titleResult.textContent = `‚úîÔ∏è 5 / 5 | Bravo, c'est un sans faute ! ‚úîÔ∏è`;
      break;
    case 1:
      titleResult.textContent = `‚ú® 4 / 5 | Vous y √™tes presque ! ‚ú®`;
      break;
    case 2:
      titleResult.textContent = `‚ú® 3 / 5 | Encore un effort ... üëÄ`;
      break;
    case 3:
      titleResult.textContent = `üëÄ 2 / 5 | Il reste quelques erreurs. üò≠`;
      break;
    case 4:
      titleResult.textContent = `üò≠ 1 / 5 | Peut mieux faire ! üò≠`;
      break;
    case 5:
      titleResult.textContent = `üëé 0 / 5 | BOOH OOH OOH ! üëé`;
      break;

    default:
      titleResult.textContent = `Whops!, je n'avais pas pr√©vu ce cas de figure ! ü§Ø`;
  }
}

// Fonction pour ajouter des couleurs aux r√©ponses
const questions = document.querySelectorAll('.quiz-question');

function addColors(results) {
  results.forEach((response, index) => {
    // Si la r√©ponse est correcte, ajoute un fond vert
    if (results[index]) {
      questions[index].style.backgroundImage =
        'linear-gradient(to right, #a8ff78, #78ffd6)';
    }
    // Sinon, ajoute un fond rouge
    else {
      questions[index].style.backgroundImage =
        'linear-gradient(to right, #ff78a8, #f5567d)';
    }
  });
}

// S√©lectionne tous les inputs de type radio
const radioInputs = document.querySelectorAll('input[type="radio"]');

radioInputs.forEach((radioInput) =>
  radioInput.addEventListener('input', resetColors)
);

// Fonction pour r√©initialiser les couleurs
function resetColors(event) {
  // R√©cup√®re l'index de la question
  const index = event.target.getAttribute('name').slice(-1) - 1;
  const parentQuizQuestion = questions[index];

  // R√©initialise les couleurs
  parentQuizQuestion.style.backgroundColor = '#f1f1f1';
  parentQuizQuestion.style.backgroundImage = 'none';
}
